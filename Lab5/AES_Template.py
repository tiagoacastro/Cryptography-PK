import copy
import math

Sbox = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]

Rcon = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000,
        0x40000000, 0x80000000, 0x1b000000, 0x36000000]

mixingVars = [0x02030101, 0x01020301, 0x01010203, 0x03010102]

Nb = 4
Nk = 4
Nr = 10
K = [0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f]
state = [0x00112233, 0x44556677, 0x8899aabb, 0xccddeeff]

def printState():
    for i in range(0, 4, 1):
        print(hex(state[i]))
    print("\n")

def fastMul(bajt, mul):
    while(mul != 1):
        sign = bajt >> 7
        bajt = (bajt << 1) & 0xFF
        if sign == 0x1:
            bajt = bajt ^ 0b00011011
        mul = mul/2
    return bajt & 0xFF

def xTimes(bajt, mul):
    if mul < 1:
        return 0x0
    temp = 0x0
    for i in range(7, 0, -1):
        if (mul >> i) & 0b1 == 0b1:
            temp = temp ^ fastMul(bajt, 2 ** i)
    if mul % 2 == 1:
        temp = temp ^ bajt
    return temp & 0xFF

def transpo():
    aux = copy.deepcopy(state)
    for i in range(len(aux)):
        state[i] = 0
        for j in range(len(aux)):
            state[i] += ((aux[j] >> ((len(aux) - i - 1)*8)) & 0xFF) << ((len(aux) - j - 1)*8)

def rotWord(temp, pos):
    aux = 0
    for j in range(pos):
        aux += 0xFF << (j * 8)
    return ((temp & aux) << (pos * 8)) + (temp >> (pos * 8))

def subWord(word):
    aux = 0
    for i in range(4):
        temp = (word >> (i * 8)) & 0xFF
        aux += Sbox[temp] << (i * 8)
    return aux

def subWords():
    for i, s in enumerate(state):
        state[i] = subWord(s)

def expandKey():
    for i in range(Nk, (Nr + 1) * Nb):
        tmp = K[i-1]
        if i % Nk == 0:
            tmp = rotWord(subWord(tmp), 1) ^ Rcon[math.floor(i / Nk) - 1]
        elif Nk > 6 and i % Nk == 4:
            tmp = subWord(tmp)
        K.append(K[i - Nk] ^ tmp)

def addRoundKey(roundKey):
    for i, s in enumerate(state):
        state[i] = s ^ roundKey[i]

def shiftRows():
    transpo()
    for i, s in enumerate(state):
        state[i] = rotWord(s, i)
    transpo()

def multiplyRows(row, col):
    result = 0
    side = 2
    for rc in range(side):
        for cr in range(side):
            result ^= xTimes(mixingVars[row*side+rc], state[cr*side+col])
    return result

def mixColumns():
    transpo()
    newState = copy.deepcopy(state)
    side = 2
    for i in range(side):
        for j in range(side):
            newState[i*side*j] = multiplyRows(i, j)
    for i in range(len(state)):
        state[i] = newState[i]
    transpo()

expandKey()
addRoundKey(K[0:Nb])
for i in range(1, Nr, 1):
    subWords()
    shiftRows()
    mixColumns()
    addRoundKey(K[i * Nb: (i + 1) * Nb])
subWords()
shiftRows()
addRoundKey(K[Nr * Nb: (Nr + 1) * Nb])
printState()
